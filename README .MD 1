#include <iostream>// LAB TASK NUMBER 5 
using namespace std;

// Node structure for Doubly Linked List
struct Node {
    int data;
    Node* next;
    Node* prev;

    // Constructor to create a new node
    Node(int val) {
        data = val;
        next = nullptr;
        prev = nullptr;
    }
};

// Doubly Linked List class
class DoublyLinkedList {
private:
    Node* head; // Head pointer

public:
    // Constructor to initialize the head
    DoublyLinkedList() {
        head = nullptr;
    }

    // 1. Insertion at the head
    void insertAtHead(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode; // If the list is empty, new node becomes the head
        } else {
            newNode->next = head; // New node's next points to the current head
            head->prev = newNode; // Old head's previous points to new node
            head = newNode;       // New node becomes the head
        }
        cout << "Inserted " << data << " at the head.\n";
    }

    // 2. Insertion at the end
    void insertAtEnd(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode; // If the list is empty, new node becomes the head
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next; // Traverse to the last node
        }
        temp->next = newNode; // Last node's next points to the new node
        newNode->prev = temp; // New node's prev points to the last node
        cout << "Inserted " << data << " at the end.\n";
    }

    // 3. Insertion at a given position
    void insertAtPosition(int data, int position) {
        if (position <= 0) {
            cout << "Invalid position!\n";
            return;
        }
        
        Node* newNode = new Node(data);
        if (position == 1) {
            insertAtHead(data); // If position is 1, insert at head
            return;
        }
        
        Node* temp = head;
        int currentPos = 1;
        // Traverse the list to find the node just before the desired position
        while (temp != nullptr && currentPos < position - 1) {
            temp = temp->next;
            currentPos++;
        }
        
        if (temp == nullptr) {
            cout << "Position exceeds the length of the list.\n";
            return;
        }
        
        newNode->next = temp->next; // New node's next points to the next node
        if (temp->next != nullptr) {
            temp->next->prev = newNode; // Update the previous pointer of the next node
        }
        temp->next = newNode; // Current node's next points to the new node
        newNode->prev = temp; // New node's prev points to the current node
        cout << "Inserted " << data << " at position " << position << ".\n";
    }

    // Function to display the list from head to tail
    void display() {
        if (head == nullptr) {
            cout << "The list is empty.\n";
            return;
        }
        Node* temp = head;
        cout << "Doubly Linked List: ";
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

// Main function
int main() {
    DoublyLinkedList dll;

    // Insertion at the head
    dll.insertAtHead(10);
    dll.insertAtHead(20);
    dll.insertAtHead(30);

    // Display the list after insertions at the head
    dll.display();

    // Insertion at the end
    dll.insertAtEnd(40);
    dll.insertAtEnd(50);

    // Display the list after insertions at the end
    dll.display();

    // Insertion at a specific position
    dll.insertAtPosition(25, 3);  // Insert at position 3
    dll.insertAtPosition(35, 5);  // Insert at position 5

    // Display the list after insertions at positions
    dll.display();

    return 0;
}
